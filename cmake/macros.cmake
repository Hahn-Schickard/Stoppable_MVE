cmake_minimum_required(VERSION 3.6)

FUNCTION(PRINT_FILES file_list)
    if(VERBOSE_FILE_INCLUSION)
        if(NOT file_list)
            message(STATUS "| VERBOSE_OUTPUT |     no files found")
        else()
            foreach(thing ${file_list})
                message(STATUS "| VERBOSE_OUTPUT |   |-- ${thing}")
            endforeach()
        endif()
    endif()
ENDFUNCTION()

FUNCTION(PRINT_TARGET_PROPERTIES target_name)
    if(VERBOSE_FILE_INCLUSION)
        message(STATUS "| VERBOSE_OUTPUT | ${target_name} target properties are::")

        get_target_property(include_dirs ${target_name} INCLUDE_DIRECTORIES)
        if(include_dirs)
            message(STATUS "| VERBOSE_OUTPUT | ==Include Directories==")
            PRINT_FILES("${include_dirs}")
        endif()

        get_target_property(sources_list ${target_name} SOURCES)
        if(sources_list)
            message(STATUS "| VERBOSE_OUTPUT | =====Source Files=====")
            PRINT_FILES("${sources_list}")
        endif()

        get_target_property(linked_libs ${target_name} LINK_LIBRARIES)
        if(linked_libs)
            message(STATUS "| VERBOSE_OUTPUT | =====Linked Libraries=====")
            PRINT_FILES("${linked_libs}")
        endif()

        message("-------------------------------------------------------------------------------------------------------------------------------------")
        message(" ")
    endif()
ENDFUNCTION()

FUNCTION(INCLUDE_DIRS directory_list)
    foreach(directory ${directory_list})
        include_directories(${directory})
    endforeach()
ENDFUNCTION()

FUNCTION(INCLUDE_DIRS_AND_FILES directory_list included_file_list)
    INCLUDE_DIRS("${directory_list}")
    foreach(directory ${directory_list})
        file(GLOB tmp_file_list ${directory}/*.hpp)
        list(APPEND included_file_list ${tmp_file_list})
    endforeach()
    set(${included_file_list} ${${included_file_list}} PARENT_SCOPE)
ENDFUNCTION()
